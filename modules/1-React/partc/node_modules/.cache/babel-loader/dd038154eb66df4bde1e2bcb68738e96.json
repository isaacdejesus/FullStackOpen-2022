{"ast":null,"code":"var _jsxFileName = \"/home/isaac/git/FullStackOpen-2022/modules/1-React/partc/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react'; //example of passing an array as state\n//allClicks array keeps track of L/R clicks\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [left, setLeft] = useState(0);\n  const [right, setRight] = useState(0);\n  const [allClicks, setAll] = useState([]); //keeps track of L/R clicks\n\n  const handleLeftClick = () => {\n    //Update both array and left click count states\n    setAll(allClicks.concat('L'));\n    setLeft(left + 1);\n  };\n\n  const handleRightClick = () => {\n    setAll(allClicks.concat('R'));\n    setRight(right + 1);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [left, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLeftClick,\n      children: \"left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRightClick,\n      children: \"right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), right, /*#__PURE__*/_jsxDEV(\"p\", {\n      children: allClicks.join(' ')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this) //join returns a string with spaces between elements\n  ;\n};\n/* Uncomment for example of passing an object as state\n//We use an object with 2 attributes instead of using two different hooks\n//Object spread syntax makes a cp of the entire object, while only updating the value of the attribute stated.\n//{...clicks, right: clicks.right + 1}\n//...clicks means cp the remainder of the object as is\n//right: clicks.right + 1 means this is the attribute we update by 1 while rest remains untouched\nconst App = () => {\n    const [clicks, setClicks] = useState({ //create a single hook to control state of two different buttons\n        left: 0, right: 0   //Here, the function takes in an object {left:0, right:0}\n    })\n    const handleLeftClick = () => \n        setClicks({...clicks, left: clicks.left + 1}) //spread syntax. Makes cp of object and adds + 1 to left\n    \n    const handleRightClick = () => \n        setClicks({...clicks, right: clicks.right + 1})\n    return (\n        <div>\n            {clicks.left}\n            <button onClick = {handleLeftClick}>left</button>\n            <button onClick = {handleRightClick}>right</button>\n            {clicks.right}\n        </div>\n    )\n}*/\n//uncomment for example of hooks and event handlers\n\n/*const Display = ({ counter }) => (<div>{counter}</div>)\nconst Button = ({ onClick, text }) => (\n        <button onClick = {onClick}>\n            {text}\n        </button>\n    )\n\nconst App = () => {\n    const [counter, setCounter] = useState(0)  //creates hook and sets value to 0\n    //Everytime SetCounter modifies state the component re-renders in order to reflect changes\n    //setCounter is a state modifying function. \n    //Everytime setCounter is called the App component is re-rendered to show changes\n    const increeaseByOne = () => setCounter(counter + 1); //function to change state/increase counter by one\n    const decreaseByOne = () => setCounter(counter - 1);\n    const setToZero = () => setCounter(0);  //resets count to 0\n    return (\n        <div>\n            <Display counter = {counter}/>\n            <Button\n                onClick = {increeaseByOne}\n                text = 'Plus'\n            />\n            <Button\n                onClick = {setToZero}\n                text = \"Zero\"\n            />\n            <Button\n                onClick = {decreaseByOne}\n                text = \"Minus\"\n            />\n        </div>\n    )\n}*/\n\n/* uncomment to see deconstruction and helper function in action\nconst Hello = ({name, age}) => { //deconstructs the props object and assigns values into vars name and age\n    //const {name, age} = props  //since props is an object, can use deconstruction to assign values to const. use above method instead\n    //props objects has the form\n    //props = {\n    //name: \"isaaccc\",\n    //age: 33,\n    //}\n    //Above, we deconstruct prop into vars to be used instead of passing entire prop\n    const bornYear = () =>  new Date().getFullYear() - age\n    return (\n        <div>\n            <p>\n                Hello {props.name}, you are {props.age} years old\n        </p>\n        <p> So you were probably born in {bornYear()}</p>\n        </div>\n    )\n}\nconst App = () =>{\n    const name = 'Isaac'\n    const age = 23\n  return (\n      <div>\n        <h1>Greetings</h1>\n        <Hello name = \"Maya\" age={26 + 10}/>\n        <Hello name = {name} age = {age}/>\n      </div>\n  );\n}\n*/\n\n\n_s(App, \"JJUKUd2BzXymbgKGEFJmjfgtAX8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/isaac/git/FullStackOpen-2022/modules/1-React/partc/src/App.js"],"names":["useState","App","left","setLeft","right","setRight","allClicks","setAll","handleLeftClick","concat","handleRightClick","join"],"mappings":";;;AAAA,SAAQA,QAAR,QAAwB,OAAxB,C,CAEA;AACA;;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBH,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACM,SAAD,EAAYC,MAAZ,IAAsBP,QAAQ,CAAC,EAAD,CAApC,CAHc,CAG2B;;AACzC,QAAMQ,eAAe,GAAG,MAAM;AAAG;AAC7BD,IAAAA,MAAM,CAACD,SAAS,CAACG,MAAV,CAAiB,GAAjB,CAAD,CAAN;AACAN,IAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACH,GAHD;;AAIA,QAAMQ,gBAAgB,GAAG,MAAM;AAC3BH,IAAAA,MAAM,CAACD,SAAS,CAACG,MAAV,CAAiB,GAAjB,CAAD,CAAN;AACAJ,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACH,GAHD;;AAIA,sBACI;AAAA,eACKF,IADL,eAEI;AAAQ,MAAA,OAAO,EAAIM,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAIE,gBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKN,KAJL,eAKI;AAAA,gBAAIE,SAAS,CAACK,IAAV,CAAe,GAAf;AAAJ;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ,CAOW;AAPX;AASH,CArBD;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA9GMV,G;;KAAAA,G;AA+GN,eAAeA,GAAf","sourcesContent":["import {useState } from 'react'\n\n//example of passing an array as state\n//allClicks array keeps track of L/R clicks\nconst App = () => {\n    const [left, setLeft] = useState(0)\n    const [right, setRight] = useState(0)\n    const [allClicks, setAll] = useState([]) //keeps track of L/R clicks\n    const handleLeftClick = () => {  //Update both array and left click count states\n        setAll(allClicks.concat('L'))\n        setLeft(left + 1)\n    }\n    const handleRightClick = () => {\n        setAll(allClicks.concat('R'))\n        setRight(right + 1)\n    }\n    return (\n        <div>\n            {left}\n            <button onClick = {handleLeftClick}>left</button>\n            <button onClick = {handleRightClick}>right</button>\n            {right}\n            <p>{allClicks.join(' ')}</p>\n        </div> //join returns a string with spaces between elements\n    )\n}\n/* Uncomment for example of passing an object as state\n//We use an object with 2 attributes instead of using two different hooks\n//Object spread syntax makes a cp of the entire object, while only updating the value of the attribute stated.\n//{...clicks, right: clicks.right + 1}\n//...clicks means cp the remainder of the object as is\n//right: clicks.right + 1 means this is the attribute we update by 1 while rest remains untouched\nconst App = () => {\n    const [clicks, setClicks] = useState({ //create a single hook to control state of two different buttons\n        left: 0, right: 0   //Here, the function takes in an object {left:0, right:0}\n    })\n    const handleLeftClick = () => \n        setClicks({...clicks, left: clicks.left + 1}) //spread syntax. Makes cp of object and adds + 1 to left\n    \n    const handleRightClick = () => \n        setClicks({...clicks, right: clicks.right + 1})\n    return (\n        <div>\n            {clicks.left}\n            <button onClick = {handleLeftClick}>left</button>\n            <button onClick = {handleRightClick}>right</button>\n            {clicks.right}\n        </div>\n    )\n}*/\n//uncomment for example of hooks and event handlers\n/*const Display = ({ counter }) => (<div>{counter}</div>)\nconst Button = ({ onClick, text }) => (\n        <button onClick = {onClick}>\n            {text}\n        </button>\n    )\n\nconst App = () => {\n    const [counter, setCounter] = useState(0)  //creates hook and sets value to 0\n    //Everytime SetCounter modifies state the component re-renders in order to reflect changes\n    //setCounter is a state modifying function. \n    //Everytime setCounter is called the App component is re-rendered to show changes\n    const increeaseByOne = () => setCounter(counter + 1); //function to change state/increase counter by one\n    const decreaseByOne = () => setCounter(counter - 1);\n    const setToZero = () => setCounter(0);  //resets count to 0\n    return (\n        <div>\n            <Display counter = {counter}/>\n            <Button\n                onClick = {increeaseByOne}\n                text = 'Plus'\n            />\n            <Button\n                onClick = {setToZero}\n                text = \"Zero\"\n            />\n            <Button\n                onClick = {decreaseByOne}\n                text = \"Minus\"\n            />\n        </div>\n    )\n}*/\n/* uncomment to see deconstruction and helper function in action\nconst Hello = ({name, age}) => { //deconstructs the props object and assigns values into vars name and age\n    //const {name, age} = props  //since props is an object, can use deconstruction to assign values to const. use above method instead\n    //props objects has the form\n    //props = {\n    //name: \"isaaccc\",\n    //age: 33,\n    //}\n    //Above, we deconstruct prop into vars to be used instead of passing entire prop\n    const bornYear = () =>  new Date().getFullYear() - age\n    return (\n        <div>\n            <p>\n                Hello {props.name}, you are {props.age} years old\n        </p>\n        <p> So you were probably born in {bornYear()}</p>\n        </div>\n    )\n}\nconst App = () =>{\n    const name = 'Isaac'\n    const age = 23\n  return (\n      <div>\n        <h1>Greetings</h1>\n        <Hello name = \"Maya\" age={26 + 10}/>\n        <Hello name = {name} age = {age}/>\n      </div>\n  );\n}\n*/\nexport default App;\n"]},"metadata":{},"sourceType":"module"}