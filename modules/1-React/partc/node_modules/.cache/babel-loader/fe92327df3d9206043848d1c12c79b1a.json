{"ast":null,"code":"var _jsxFileName = \"/home/isaac/git/FullStackOpen-2022/modules/1-React/partc/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [clicks, setClicks] = useState({\n    //create a single hook to control state of two different buttons\n    left: 0,\n    right: 0 //Here, the function takes in an object {left:0, right:0}\n\n  });\n\n  const handleLeftClick = () => {\n    const newClicks = { ...clicks,\n      left: clicks.left + 1\n    };\n    setClicks(newClicks);\n  };\n\n  const handleRightClick = () => {\n    const newClicks = { ...clicks,\n      right: clicks.right + 1\n    };\n    setClicks(newClicks);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [clicks.left, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLeftClick,\n      children: \"left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRightClick,\n      children: \"right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), clicks.right]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n}; //uncomment for example of hooks and event handlers\n\n/*const Display = ({ counter }) => (<div>{counter}</div>)\nconst Button = ({ onClick, text }) => (\n        <button onClick = {onClick}>\n            {text}\n        </button>\n    )\n\nconst App = () => {\n    const [counter, setCounter] = useState(0)  //creates hook and sets value to 0\n    //Everytime SetCounter modifies state the component re-renders in order to reflect changes\n    //setCounter is a state modifying function. \n    //Everytime setCounter is called the App component is re-rendered to show changes\n    const increeaseByOne = () => setCounter(counter + 1); //function to change state/increase counter by one\n    const decreaseByOne = () => setCounter(counter - 1);\n    const setToZero = () => setCounter(0);  //resets count to 0\n    return (\n        <div>\n            <Display counter = {counter}/>\n            <Button\n                onClick = {increeaseByOne}\n                text = 'Plus'\n            />\n            <Button\n                onClick = {setToZero}\n                text = \"Zero\"\n            />\n            <Button\n                onClick = {decreaseByOne}\n                text = \"Minus\"\n            />\n        </div>\n    )\n}*/\n\n/* uncomment to see deconstruction and helper function in action\nconst Hello = ({name, age}) => { //deconstructs the props object and assigns values into vars name and age\n    //const {name, age} = props  //since props is an object, can use deconstruction to assign values to const. use above method instead\n    //props objects has the form\n    //props = {\n    //name: \"isaaccc\",\n    //age: 33,\n    //}\n    //Above, we deconstruct prop into vars to be used instead of passing entire prop\n    const bornYear = () =>  new Date().getFullYear() - age\n    return (\n        <div>\n            <p>\n                Hello {props.name}, you are {props.age} years old\n        </p>\n        <p> So you were probably born in {bornYear()}</p>\n        </div>\n    )\n}\nconst App = () =>{\n    const name = 'Isaac'\n    const age = 23\n  return (\n      <div>\n        <h1>Greetings</h1>\n        <Hello name = \"Maya\" age={26 + 10}/>\n        <Hello name = {name} age = {age}/>\n      </div>\n  );\n}\n*/\n\n\n_s(App, \"0HKRNTrtCVW1O0JCYQCD4UakUfo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/isaac/git/FullStackOpen-2022/modules/1-React/partc/src/App.js"],"names":["useState","App","clicks","setClicks","left","right","handleLeftClick","newClicks","handleRightClick"],"mappings":";;;AAAA,SAAQA,QAAR,QAAwB,OAAxB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC;AAAE;AACnCI,IAAAA,IAAI,EAAE,CAD2B;AACxBC,IAAAA,KAAK,EAAE,CADiB,CACb;;AADa,GAAD,CAApC;;AAGA,QAAMC,eAAe,GAAG,MAAM;AAC1B,UAAMC,SAAS,GAAG,EACd,GAAGL,MADW;AAEdE,MAAAA,IAAI,EAAEF,MAAM,CAACE,IAAP,GAAc;AAFN,KAAlB;AAIAD,IAAAA,SAAS,CAACI,SAAD,CAAT;AACH,GAND;;AAOA,QAAMC,gBAAgB,GAAG,MAAM;AAC3B,UAAMD,SAAS,GAAG,EACd,GAAGL,MADW;AAEdG,MAAAA,KAAK,EAAEH,MAAM,CAACG,KAAP,GAAe;AAFR,KAAlB;AAIAF,IAAAA,SAAS,CAACI,SAAD,CAAT;AACH,GAND;;AAOA,sBACI;AAAA,eACKL,MAAM,CAACE,IADZ,eAEI;AAAQ,MAAA,OAAO,EAAIE,eAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAQ,MAAA,OAAO,EAAIE,gBAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKN,MAAM,CAACG,KAJZ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA1BD,C,CA2BA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA3FMJ,G;;KAAAA,G;AA4FN,eAAeA,GAAf","sourcesContent":["import {useState } from 'react'\n\nconst App = () => {\n    const [clicks, setClicks] = useState({ //create a single hook to control state of two different buttons\n        left: 0, right: 0   //Here, the function takes in an object {left:0, right:0}\n    })\n    const handleLeftClick = () => {\n        const newClicks = {\n            ...clicks,\n            left: clicks.left + 1\n        }\n        setClicks(newClicks)\n    }\n    const handleRightClick = () => {\n        const newClicks = {\n            ...clicks, \n            right: clicks.right + 1\n        }\n        setClicks(newClicks)\n    }\n    return (\n        <div>\n            {clicks.left}\n            <button onClick = {handleLeftClick}>left</button>\n            <button onClick = {handleRightClick}>right</button>\n            {clicks.right}\n        </div>\n    )\n}\n//uncomment for example of hooks and event handlers\n/*const Display = ({ counter }) => (<div>{counter}</div>)\nconst Button = ({ onClick, text }) => (\n        <button onClick = {onClick}>\n            {text}\n        </button>\n    )\n\nconst App = () => {\n    const [counter, setCounter] = useState(0)  //creates hook and sets value to 0\n    //Everytime SetCounter modifies state the component re-renders in order to reflect changes\n    //setCounter is a state modifying function. \n    //Everytime setCounter is called the App component is re-rendered to show changes\n    const increeaseByOne = () => setCounter(counter + 1); //function to change state/increase counter by one\n    const decreaseByOne = () => setCounter(counter - 1);\n    const setToZero = () => setCounter(0);  //resets count to 0\n    return (\n        <div>\n            <Display counter = {counter}/>\n            <Button\n                onClick = {increeaseByOne}\n                text = 'Plus'\n            />\n            <Button\n                onClick = {setToZero}\n                text = \"Zero\"\n            />\n            <Button\n                onClick = {decreaseByOne}\n                text = \"Minus\"\n            />\n        </div>\n    )\n}*/\n/* uncomment to see deconstruction and helper function in action\nconst Hello = ({name, age}) => { //deconstructs the props object and assigns values into vars name and age\n    //const {name, age} = props  //since props is an object, can use deconstruction to assign values to const. use above method instead\n    //props objects has the form\n    //props = {\n    //name: \"isaaccc\",\n    //age: 33,\n    //}\n    //Above, we deconstruct prop into vars to be used instead of passing entire prop\n    const bornYear = () =>  new Date().getFullYear() - age\n    return (\n        <div>\n            <p>\n                Hello {props.name}, you are {props.age} years old\n        </p>\n        <p> So you were probably born in {bornYear()}</p>\n        </div>\n    )\n}\nconst App = () =>{\n    const name = 'Isaac'\n    const age = 23\n  return (\n      <div>\n        <h1>Greetings</h1>\n        <Hello name = \"Maya\" age={26 + 10}/>\n        <Hello name = {name} age = {age}/>\n      </div>\n  );\n}\n*/\nexport default App;\n"]},"metadata":{},"sourceType":"module"}