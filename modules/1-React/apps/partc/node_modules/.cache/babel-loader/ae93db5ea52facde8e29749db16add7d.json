{"ast":null,"code":"var _jsxFileName = \"/home/isaac/git/FullStackOpen-2022/modules/1-React/partc/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [counter, setCounter] = useState(0); //creates hook and sets value to 0\n  //Everytime SetCounter modifies state the component re-renders in order to reflect changes\n  //setCounter is a state modifying function. \n  //Everytime setCounter is called the App component is re-rendered to show changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCounter(counter + 1),\n      children: \"  //event handler is a function Plus\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 9\n  }, this);\n};\n/* uncomment to see deconstruction and helper function in action\nconst Hello = ({name, age}) => { //deconstructs the props object and assigns values into vars name and age\n    //const {name, age} = props  //since props is an object, can use deconstruction to assign values to const. use above method instead\n    //props objects has the form\n    //props = {\n    //name: \"isaaccc\",\n    //age: 33,\n    //}\n    //Above, we deconstruct prop into vars to be used instead of passing entire prop\n    const bornYear = () =>  new Date().getFullYear() - age\n    return (\n        <div>\n            <p>\n                Hello {props.name}, you are {props.age} years old\n        </p>\n        <p> So you were probably born in {bornYear()}</p>\n        </div>\n    )\n}\nconst App = () =>{\n    const name = 'Isaac'\n    const age = 23\n  return (\n      <div>\n        <h1>Greetings</h1>\n        <Hello name = \"Maya\" age={26 + 10}/>\n        <Hello name = {name} age = {age}/>\n      </div>\n  );\n}\n*/\n\n\n_s(App, \"mgO7WMHyhiBnLtH7uw/qAj2Cy9A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/isaac/git/FullStackOpen-2022/modules/1-React/partc/src/App.js"],"names":["useState","App","counter","setCounter"],"mappings":";;;AAAA,SAAQA,QAAR,QAAwB,OAAxB;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,CAAD,CAAtC,CADc,CAC6B;AAC3C;AACA;AACA;;AACA,sBACI;AAAA,4BACA;AAAA,gBAAME;AAAN;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAQ,MAAA,OAAO,EAAE,MAAMC,UAAU,CAACD,OAAO,GAAG,CAAX,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAbD;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA5CMD,G;;KAAAA,G;AA6CN,eAAeA,GAAf","sourcesContent":["import {useState } from 'react'\nconst App = () => {\n    const [counter, setCounter] = useState(0)  //creates hook and sets value to 0\n    //Everytime SetCounter modifies state the component re-renders in order to reflect changes\n    //setCounter is a state modifying function. \n    //Everytime setCounter is called the App component is re-rendered to show changes\n    return (\n        <div>\n        <div>{counter}</div>\n        <button onClick={() => setCounter(counter + 1)}>  //event handler is a function\n            Plus\n        </button>\n        </div>\n    )\n}\n/* uncomment to see deconstruction and helper function in action\nconst Hello = ({name, age}) => { //deconstructs the props object and assigns values into vars name and age\n    //const {name, age} = props  //since props is an object, can use deconstruction to assign values to const. use above method instead\n    //props objects has the form\n    //props = {\n    //name: \"isaaccc\",\n    //age: 33,\n    //}\n    //Above, we deconstruct prop into vars to be used instead of passing entire prop\n    const bornYear = () =>  new Date().getFullYear() - age\n    return (\n        <div>\n            <p>\n                Hello {props.name}, you are {props.age} years old\n        </p>\n        <p> So you were probably born in {bornYear()}</p>\n        </div>\n    )\n}\nconst App = () =>{\n    const name = 'Isaac'\n    const age = 23\n  return (\n      <div>\n        <h1>Greetings</h1>\n        <Hello name = \"Maya\" age={26 + 10}/>\n        <Hello name = {name} age = {age}/>\n      </div>\n  );\n}\n*/\nexport default App;\n"]},"metadata":{},"sourceType":"module"}